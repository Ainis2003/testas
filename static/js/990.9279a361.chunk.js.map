{"version":3,"file":"static/js/990.9279a361.chunk.js","mappings":"8LAOA,MA+PA,EA/PaA,KACX,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,MACZC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,OAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,OAC5BG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,OAC1BK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAC5BO,EAAKC,IAAUR,EAAAA,EAAAA,WAAS,IACxBS,EAAMC,IAAWV,EAAAA,EAAAA,WAAS,IAC1BW,EAAWC,IAAgBZ,EAAAA,EAAAA,UAAS,WAErCa,EAAUC,OAAOC,SAASC,KAEhC,IAAIC,EAAS,IAAIC,MAAM,GAAGC,KAAK,MAC5BC,KAAIC,GAAK,IAAIH,MAAM,GAAGC,KAAK,SAI9BG,EAAAA,EAAAA,YAAU,KAER,MAAMC,GAAYC,EAAAA,EAAAA,IAAG,kDAyCrB,OAxCAzB,EAAUwB,GAEVA,EAAUE,GAAG,WAAW,KAEtBF,EAAUG,KAAK,OAAQ,CAAE,OAAU9B,GAAS,IAK9C2B,EAAUE,GAAG,WAAYE,IACvB,MAAMC,EAAQD,EAAY,MAEb,gBAATC,IACF1B,EAASyB,EAAY,OACrBvB,EAAQuB,EAAW,MAEjBrB,EADE,UAAWqB,EACJA,EAAY,MAGZ,OAGA,YAATC,IACF1B,EAASyB,EAAY,OACrBvB,EAAQuB,EAAW,MACnBnB,EAAOmB,EAAa,QACpBjB,EAAQiB,EAAW,MAEjBrB,EADE,UAAWqB,EACJA,EAAY,MAGZ,OAKbf,EAAagB,EAAM,IAId,KAGLL,EAAUM,YAAY,CACvB,GACA,CAACjC,IAEJ,MAyBMkC,EAAgBA,KAJb,IAAM7B,EAAM8B,MAAM,kBAAkBC,UAAUC,KAAK,KAAO,KAKzCC,QAAQ,UAAW,IAIvCC,EAAelB,IACnB,IAAII,EAAI,EACR,IAAK,IAAIe,EAAW,EAAGA,EAAWnB,EAAOoB,OAAQD,IAE/C,IAAK,IAAIE,EAAW,EAAGA,EAAWrB,EAAOmB,GAAUC,OAAQC,IAAY,CAErE,MAAMC,EAAQT,IAAgBT,GAChB,MAAVkB,EAEAtB,EAAOmB,GAAUE,GADhBnC,EAC4B,QAGA,SAEZ,MAAVoC,EACTtB,EAAOmB,GAAUE,GAAY,MACV,MAAVC,IACTtB,EAAOmB,GAAUE,GAAY,UAE/BjB,GACF,CAGF,OACEmB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAE5BvC,GAAOc,EAAOG,KAAI,CAACuB,EAAKP,KACvBQ,EAAAA,EAAAA,KAAA,OAAoBH,UAAU,MAAKC,SAChCC,EAAIvB,KAAI,CAACyB,EAAMP,KACdM,EAAAA,EAAAA,KAAA,OAEEH,UAAS,UAAAK,OAAYD,GAAQ,SAC7BE,QAASA,IAAMC,EAAgBV,IAF1BA,MAHDF,MAUVjC,GAAOc,EAAOG,KAAI,CAACuB,EAAKP,KACxBQ,EAAAA,EAAAA,KAAA,OAAoBH,UAAU,MAAKC,SAChCC,EAAIvB,KAAI,CAACyB,EAAMP,KACdM,EAAAA,EAAAA,KAAA,OAEEH,UAAS,UAAAK,OAAYD,GAAQ,UADxBP,MAHDF,OASR,EAKJY,EAAmBC,IAlFP9C,KAEhBL,EAAO4B,KAAK,OAAQ,CAAE,OAAU9B,EAAQ,KAAQO,EAAO,GAAI,EAkF3D+C,CAASD,EAAS,EAAE,EAGhBE,EAAUA,KACdC,UAAUC,UAAUC,UAAUzC,EAAQ,EAElC0C,EAASA,KACbH,UAAUC,UAAUC,UAAU1D,EAAO,EAiEvC,IAAI4D,EACJ,OAAQ7C,GACN,IAAK,gBACH6C,GAVFZ,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,oBAUhB,MACF,IAAK,UACHc,GAnBFZ,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,eAmBhB,MACF,IAAK,yBACHc,GA9JFhB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,KAAGH,UAAU,UAASC,SAAC,4CACvBF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,UAASC,SAAA,CAAC,gBAAYE,EAAAA,EAAAA,KAAA,KAAAF,SAAI9C,QACvC4C,EAAAA,EAAAA,MAAA,KAAGC,UAAU,UAASC,SAAA,CAAC,kCAA8BE,EAAAA,EAAAA,KAAA,KAAAF,SAAI7B,IAAY,QACrE+B,EAAAA,EAAAA,KAAA,UAAQH,UAAU,aAAaM,QAASI,EAAQT,SAAC,cACjDE,EAAAA,EAAAA,KAAA,UAAQH,UAAU,aAAaM,QAASQ,EAAOb,SAAC,oBA0JhD,MACF,IAAK,eACHc,GAxEFhB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAEEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACGvC,IACCyC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,iBAIlBvC,IACAyC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,qBAInBP,EAAYlB,OAIf2B,EAAAA,EAAAA,KAAA,KAAGa,MAAM,QAAOf,SAAErC,OAsDlB,MACF,IAAK,WACHmD,GAlDFhB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,eACfP,EAAYlB,GACZR,IACCmC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,YAGlBjC,GAAQF,IACRqC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,eAGlBjC,IAASF,IACTqC,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAAA,KAAGa,MAAQ,KAAIf,SAAC,gBAGnBE,EAAAA,EAAAA,KAAA,KAAGa,MAAM,QAAOf,SAAErC,OAiCnB,MACF,QACEmD,EAAc,KAGlB,OACEZ,EAAAA,EAAAA,KAAA,OAAAF,SACGc,GAEG,C","sources":["pages/Room.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport '../styles/Default.css'\nimport '../styles/Connect4Board.css'\n\n\nconst Room = () => {\n  const { gameId } = useParams();\n  const [socket, setSocket] = useState(null);\n  const [board, setBoard] = useState(null);\n  const [move, setMove] = useState(null);\n  const [error, setError] = useState(null);\n  const [win, setWin] = useState(false)\n  const [draw, setDraw] = useState(false)\n  const [gameState, setGameState] = useState('loading');\n\n  const fullURL = window.location.href;\n\n  let board1 = new Array(6).fill(null)\n    .map(i => new Array(7).fill(null));\n\n\n\n  useEffect(() => {\n    // Establish a WebSocket connection to the server\n    const newSocket = io('https://flask-skeleton-eorwmlzggq-nw.a.run.app');\n    setSocket(newSocket);\n\n    newSocket.on('connect', () => {\n      \n      newSocket.emit('join', { 'gameId': gameId });\n      \n    });\n    \n\n    newSocket.on('message', (data) => {\n      const state = data['state'];\n   \n      if (state == 'playing_game') {\n        setBoard(data['board']);\n        setMove(data['move']);\n        if ('error' in data) {\n          setError(data['error'])\n        }\n        else {\n          setError(null)\n        }\n      }\n      if (state == 'game_end') {\n        setBoard(data['board']);\n        setMove(data['move']);\n        setWin(data['winner'])\n        setDraw(data['draw'])\n        if ('error' in data) {\n          setError(data['error'])\n        }\n        else {\n          setError(null)\n        }\n      }\n\n\n      setGameState(state);\n\n    });\n    \n    return () => {\n      // Clean up: disconnect the WebSocket when the component unmounts\n      \n      newSocket.disconnect();\n    };\n  }, [gameId]);\n\n  const MakeMove = (move) => {\n\n    socket.emit('move', { 'gameId': gameId, 'move': move - 1 });\n  };\n\n\n  const renderWaitingForOnePlayer = () => (\n    <div>\n      <p className='message'>Waiting for one more player to join...</p>\n      <p className='message'>Room ID is: <b>{gameId}</b></p>\n      <p className='message'>Invite players with this URL: <b>{fullURL}</b> </p>\n      <button className='copyButton' onClick={copyURL}>Copy URL</button>\n      <button className='copyButton' onClick={copyID}>Copy Room ID</button>\n    </div>\n\n  );\n\n\n \n  const reversedString = () => {\n    \n    return '[' + board.match(/\\[([^[\\]]*)\\]/g).reverse().join(',') + ']';\n\n  }\n\n  const cleanedString = () => {\n    return reversedString().replace(/[^0-2]/g, '');\n  }\n\n\n  const renderBoard = (board1) => {\n    let i = 0;\n    for (let rowIndex = 0; rowIndex < board1.length; rowIndex++) {\n\n      for (let colIndex = 0; colIndex < board1[rowIndex].length; colIndex++) {\n\n        const value = cleanedString()[i];\n        if (value === \"0\") {\n          if(move){\n            board1[rowIndex][colIndex] = 'empty';\n          }\n          else{\n            board1[rowIndex][colIndex] = 'empty2';\n          }\n        } else if (value === \"1\") {\n          board1[rowIndex][colIndex] = 'red';\n        } else if (value === \"2\") {\n          board1[rowIndex][colIndex] = 'yellow';\n        }\n        i++;\n      }\n    }\n\n    return (\n      <div className=\"connect4-board\">\n\n        {move&&(board1.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`circle ${cell || 'empty'}`}\n                onClick={() => handleCellClick(colIndex)}\n              ></div>\n            ))}\n          </div>\n        )))}\n        {!move&&(board1.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`circle ${cell || 'empty'}`}\n              ></div>\n            ))}\n          </div>\n        )))}\n      </div>\n\n    )\n  }\n\n  const handleCellClick = (column) => {\n\n    MakeMove(column + 1);\n  }\n\n  const copyURL = () => {\n    navigator.clipboard.writeText(fullURL)\n  }\n  const copyID = () => {\n    navigator.clipboard.writeText(gameId)\n  }\n\n\n  const renderPlayingGame = () => (\n    <div>\n\n      <div>\n        {move && (\n          <div>\n            <p class = \"p1\">Your turn</p>\n          </div>\n        )}\n\n        {!move && (\n          <div>\n            <p class = \"p1\">Opponents turn</p>\n          </div>\n        )}\n        \n        {renderBoard(board1)}\n\n      </div>\n\n      <p class=\"error\">{error}</p>\n\n    </div>\n  );\n\n  const renderGameEnd = () => (\n    <div>\n      <p class = \"p1\">Game over!</p>\n      {renderBoard(board1)}\n      {draw && (\n        <div>\n          <p class = \"p1\">Draw</p>\n        </div>\n      )}\n      {!draw && win && (\n        <div>\n          <p class = \"p1\">You won</p>\n        </div>\n      )}\n      {!draw && !win && (\n        <div>\n          <p class = \"p1\">You lost</p>\n        </div>\n      )}\n       <p class=\"error\">{error}</p>\n    </div>\n  );\n  const renderLoading = () => (\n    <div>\n      <p class = \"p1\">Loading!</p>\n\n    </div>\n  );\n  const renderNoRoom = () => (\n    <div>\n      <p class = \"p1\">No room found</p>\n\n    </div>\n  );\n\n\n  let uiComponent;\n  switch (gameState) {\n    case 'no_room_found':\n      uiComponent = renderNoRoom();\n      break;\n    case 'loading':\n      uiComponent = renderLoading();\n      break;\n    case 'waiting_for_one_player':\n      uiComponent = renderWaitingForOnePlayer();\n      break;\n    case 'playing_game':\n      uiComponent = renderPlayingGame();\n      break;\n    case 'game_end':\n      uiComponent = renderGameEnd();\n      break;\n    default:\n      uiComponent = null;\n  }\n\n  return (\n    <div>\n      {uiComponent}\n\n    </div>\n  );\n};\n\n\n\n\nexport default Room;\n"],"names":["Room","gameId","useParams","socket","setSocket","useState","board","setBoard","move","setMove","error","setError","win","setWin","draw","setDraw","gameState","setGameState","fullURL","window","location","href","board1","Array","fill","map","i","useEffect","newSocket","io","on","emit","data","state","disconnect","cleanedString","match","reverse","join","replace","renderBoard","rowIndex","length","colIndex","value","_jsxs","className","children","row","_jsx","cell","concat","onClick","handleCellClick","column","MakeMove","copyURL","navigator","clipboard","writeText","copyID","uiComponent","class"],"sourceRoot":""}