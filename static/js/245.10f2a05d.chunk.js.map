{"version":3,"file":"static/js/245.10f2a05d.chunk.js","mappings":"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","sources":["pages/GameEnd.js","pages/Room.js"],"sourcesContent":["import React from 'react';\nimport '../styles/GameEnd.css';\n\nconst GameEnd = ({ draw, win, onRestart, onHome}) => {\n  return (\n    <div className=\"game-end-overlay\">\n      <div className=\"game-end-content\">\n        <p>Game over!</p>\n        {draw ? (\n          <p>It's a draw!</p>\n        ) : win ? (\n          <p>Congratulations! You won!</p>\n        ) : (\n          <p>Sorry, you lost. Better luck next time!</p>\n        )}\n        <button onClick={onRestart}>Play Again</button>\n        <button onClick={onHome}>Home</button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameEnd;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport '../styles/Default.css'\nimport '../styles/Connect4Board.css'\nimport GameEnd from './GameEnd';\n\n\nconst Room = () => {\n  const { gameId } = useParams();\n  const [socket, setSocket] = useState(null);\n  const [board, setBoard] = useState(null);\n  const [move, setMove] = useState(null);\n  const [error, setError] = useState(null);\n  const [win, setWin] = useState(false)\n  const [draw, setDraw] = useState(false)\n  const [gameState, setGameState] = useState('loading');\n  const navigate = useNavigate();\n\n  const fullURL = window.location.href;\n\n  let board1 = new Array(6).fill(null)\n    .map(i => new Array(7).fill(null));\n\n\n\n  useEffect(() => {\n    // Establish a WebSocket connection to the server\n    const newSocket = io('https://flask-skeleton-eorwmlzggq-nw.a.run.app')\n    setSocket(newSocket);\n\n    newSocket.on('connect', () => {\n      \n      newSocket.emit('join', { 'gameId': gameId });\n      \n    });\n    \n\n    newSocket.on('message', (data) => {\n      const state = data['state'];\n   \n      if (state == 'playing_game') {\n        setBoard(data['board']);\n        setMove(data['move']);\n        if ('error' in data) {\n          setError(data['error'])\n        }\n        else {\n          setError(null)\n        }\n      }\n      if (state == 'game_end') {\n        setBoard(data['board']);\n        setMove(data['move']);\n        setWin(data['winner'])\n        setDraw(data['draw'])\n        if ('error' in data) {\n          setError(data['error'])\n        }\n        else {\n          setError(null)\n        }\n      }\n\n\n      setGameState(state);\n\n    });\n    \n    return () => {\n      // Clean up: disconnect the WebSocket when the component unmounts\n      \n      newSocket.disconnect();\n    };\n  }, [gameId]);\n\n  const MakeMove = (move) => {\n\n    socket.emit('move', { 'gameId': gameId, 'move': move - 1 });\n  };\n\n\n  const renderWaitingForOnePlayer = () => (\n    <div>\n      <p className='message'>Waiting for one more player to join...</p>\n      <p className='message'>Room ID is: <b>{gameId}</b></p>\n      <p className='message'>Invite players with this URL: <b>{fullURL}</b> </p>\n      <button className='copyButton' onClick={copyURL}>Copy URL</button>\n      <button className='copyButton' onClick={copyID}>Copy Room ID</button>\n    </div>\n\n  );\n\n\n \n  const reversedString = () => {\n    \n    return '[' + board.match(/\\[([^[\\]]*)\\]/g).reverse().join(',') + ']';\n\n  }\n\n  const cleanedString = () => {\n    return reversedString().replace(/[^0-2]/g, '');\n  }\n\n\n  const renderBoard = (board1) => {\n    let i = 0;\n    for (let rowIndex = 0; rowIndex < board1.length; rowIndex++) {\n\n      for (let colIndex = 0; colIndex < board1[rowIndex].length; colIndex++) {\n\n        const value = cleanedString()[i];\n        if (value === \"0\") {\n          if(move){\n            board1[rowIndex][colIndex] = 'empty';\n          }\n          else{\n            board1[rowIndex][colIndex] = 'empty2';\n          }\n        } else if (value === \"1\") {\n          board1[rowIndex][colIndex] = 'red';\n        } else if (value === \"2\") {\n          board1[rowIndex][colIndex] = 'yellow';\n        }\n        i++;\n      }\n    }\n\n    return (\n      <div className=\"connect4-board\">\n\n        {move&&(board1.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`circle ${cell || 'empty'}`}\n                onClick={() => handleCellClick(colIndex)}\n              ></div>\n            ))}\n          </div>\n        )))}\n        {!move&&(board1.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`circle ${cell || 'empty'}`}\n              ></div>\n            ))}\n          </div>\n        )))}\n      </div>\n\n    )\n  }\n\n  const handleCellClick = (column) => {\n\n    MakeMove(column + 1);\n  }\n\n  const copyURL = () => {\n    navigator.clipboard.writeText(fullURL)\n  }\n  const copyID = () => {\n    navigator.clipboard.writeText(gameId)\n  }\n  \n\n\n  const renderPlayingGame = () => (\n    <div>\n\n      <div>\n        {move && (\n          <div>\n            <p class = \"p1\">Your turn</p>\n          </div>\n        )}\n\n        {!move && (\n          <div>\n            <p class = \"p1\">Opponents turn</p>\n          </div>\n        )}\n        \n        {renderBoard(board1)}\n\n      </div>\n\n      <p class=\"error\">{error}</p>\n      \n    </div>\n  );\n\n  const renderGameEnd = () => (\n    <div>\n      {renderBoard(board1)}\n      <GameEnd draw={draw} win={win} onRestart={() => window.location.reload()} onHome={() => navigate(\"/\")}/>\n    </div>\n  );  \n  const renderLoading = () => (\n    <div>\n      <p class = \"p1\">Loading!</p>\n\n    </div>\n  );\n  const renderNoRoom = () => (\n    <div>\n      <p class = \"p1\">No room found</p>\n\n    </div>\n  );\n\n\n  let uiComponent;\n  switch (gameState) {\n    case 'no_room_found':\n      uiComponent = renderNoRoom();\n      break;\n    case 'loading':\n      uiComponent = renderLoading();\n      break;\n    case 'waiting_for_one_player':\n      uiComponent = renderWaitingForOnePlayer();\n      break;\n    case 'playing_game':\n      uiComponent = renderPlayingGame();\n      break;\n    case 'game_end':\n      uiComponent = renderGameEnd();\n      break;\n    default:\n      uiComponent = null;\n  }\n\n  return (\n    <div>\n      {uiComponent}\n\n    </div>\n  );\n};\n\n\n\n\nexport default Room;"],"names":["_ref","draw","win","onRestart","onHome","_jsx","className","children","_jsxs","onClick","Room","gameId","useParams","socket","setSocket","useState","board","setBoard","move","setMove","error","setError","setWin","setDraw","gameState","setGameState","navigate","useNavigate","fullURL","window","location","href","board1","Array","fill","map","i","useEffect","newSocket","io","on","emit","data","state","disconnect","cleanedString","match","reverse","join","replace","renderBoard","rowIndex","length","colIndex","value","row","cell","concat","handleCellClick","column","MakeMove","copyURL","navigator","clipboard","writeText","copyID","uiComponent","class","GameEnd","reload"],"sourceRoot":""}